# load R packages
library(qqman)
library(data.table)
# read GWAS summary statistics
gwas <- as.data.frame(fread("Left_handedness.txt",header=T))
head(gwas)
png("manhattan.png",units="in",width = 15,height = 8,res=300)
manhattan(gwas,chr="CHR",bp="BP",p="P",snp="SNP",suggestiveline=F,genomewideline=-log10(5e-08))
head(gwas)
str(gwas)
png("manhattan.png",units="in",width = 15,height = 8,res=300)
manhattan(gwas,chr="CHR",bp="BP",p="P",snp="SNP",suggestiveline=F,genomewideline=-log10(5e-08))
str(gwas)
str(gwas)
as.numeric(gwas$CHR)
gwas[which(gwas$CHR != '[:digit:]*'),]
checkchq <- as.numeric(gwas$CHR)
gwas[is.na(checkchq),]
head(gwas)
summary(gwas$CHR)
summary(as.factor(gwas$CHR))
gwas[is.na(checkchq),16]
gwas[is.na(checkchq),16] <- 23
gwas$CHR <- as.numeric(gwas$CHR)
png("manhattan.png",units="in",width = 15,height = 8,res=300)
manhattan(gwas,chr="CHR",bp="BP",p="P",snp="SNP",suggestiveline=F,genomewideline=-log10(5e-08))
dev.off()
png("qqplot.png",units="in",width=8,height=8,res=300)
qq(gwas$P)
dev.off()
# print genomic inflation factor
(lambda=median((qnorm(gwas$P/2,0,1))^2)/qchisq(0.5,1))
head(gwas)
gwas[1,3]
head(gwas)
gwas[gwas$P = min(gwas$P)]
gwas[gwas$P == min(gwas$P)]
gwas[gwas$P == min(gwas$P),]
gwas[gwas$P == min(gwas$P),1]
nrow(gwas)
nrow(gwas)
source("CellType.R") ## you may need to change path here to locate Files.R on your device
source("./CellType.R") ## you may need to change path here to locate Files.R on your device
source("CellType.R") ## you may need to change path here to locate Files.R on your device
library(ggplot2)
library(ggthemes)
source("CellType.R") ## you may need to change path here to locate Files.R on your device
source("CellType.R") ## you may need to change path here to locate Files.R on your device
install.packages("devtools")
library(devtools)
install_github("GenomicSEM/GenomicSEM")
install.packages(parallel)
install.packages(parallel)
install.packages(data.table)
library(parallel)
install.packages(data.table)
install.packages(optparse)
install.packages(BEDMatrix)
install.packages("data.table")
install.packages("optparse")
install.packages("BEDMatrix")
install.packages(data.table,dependencies=TRUE)
install.packages("data.table",dependencies=TRUE)
install.packages(c('optparse','RColorBrewer'))
install.packages('plink2R-master/plink2R/',repos=NULL)
install.packages('plink2R-master/plink2R/')
library(plink2R)
install.packages("remotes")
remotes::install_github("oujenhsiang/PLINK2R")
install.packages("remotes")
remotes::install_github("oujenhsiang/PLINK2R")
install.packages("MultiPhen")
suppressMessages(library('plink2R'))
suppressMessages(library('plink2R'))
suppressMessages(library("optparse"))
suppressMessages(library('ggplot2'))
suppressMessages(library('MultiPhen'))
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
suppressMessages(library('MultiPhen'))
## Please do not modify this file
Cells.HF = c("Mononuclear cells from peripheral blood",
"T cells CD3+",
"T cells effector/memory CD4+ CD25int CD127+",
"T regulatory cells CD4+ CD25+ CD127-",
"T helper cells CD4+ CD25-",
"T helper naive cells CD4+ CD25- CD45RA+",
"T helper cells PMA-I stimulated CD4+ CD25- IL17-",
"T helper 17 cells PMA-I stimulated CD4+ CD25- IL17+",
"T helper memory cells CD4+ CD25- CD45RO+",
"T helper memory cells from peripheral blood CD4+",
"T memory cells CD8+",
"T helper naive cells CD4+",
"T naive cells CD8+",
"Monocytes CD14+",
"Hematopoietic stem cells G-CSF-mobilized CD34+",
"B cells CD19+",
"Natural killer cells CD56+",
"GM12878 lymphoblastoid cells",
"Thymus",
"Spleen",
"Brain hippocampus middle",
"Brain substantia nigra",
"Brain anterior caudate",
"Brain cingulate gyrus",
"Brain inferior temporal lobe",
"Brain angular gyrus",
"Brain dorsolateral prefrontal cortex",
"NH-A astrocytes",
"Lung",
"NHLF lung fibroblast primary cells",
"Aorta",
"HUVEC umbilical vein endothelial primary cells",
"Right atrium",
"Left ventricle",
"Right ventricle",
"Muscle satellite cultured cells",
"Psoas muscle",
"Skeletal muscle",
"HSMM skeletal muscle myoblasts cells",
"HSMM cell derived skeletal muscle myotubes cells",
"Stomach smooth muscle",
"Duodenum smooth muscle",
"Colon smooth muscle",
"Rectal smooth muscle",
"Esophagus",
"Gastric",
"Stomach mucosa",
"Duodenum mucosa",
"Small intestine",
"Sigmoid colon",
"Colonic mucosa",
"Rectal mucosa",
"Pancreas",
"Pancreatic islets",
"Liver",
"Adipose nuclei",
"Adipose derived mesenchymal stem cell cultured cells",
"Mesenchymal stem cell derived adipocyte cultured cells",
"Mesenchymal stem cell derived chondrocyte cultured cells",
"Bone marrow derived cultured mesenchymal stem cells",
"Osteoblast primary cells",
"Foreskin fibroblast primary cells",
"Foreskin melanocyte primary cells",
"Foreskin keratinocyte primary cells",
"NHDF-Ad adult dermal fibroblast primary cells",
"NHEK-epidermal keratinocyteprimary cells",
"Breast myoepithelial primary cells",
"Breast variant human mammary epithelial cells (vHMEC)",
"HMEC mammary epithelial primary cells",
"Ovary")
source("CellType.R") ## you may need to change path here to locate Files.R on your device
source("CellType.R") ## you may need to change path here to locate Files.R on your device
library(ggplot2)
library(ggthemes)
# Directory to the LDSC heritability partitioning results (change this):
InDir="/Users/hazelma/ldsc"
# LDSC partition heritability results (change this):
h2.result="handedness.step3.results"
## output:
# Directory to store the enrichment plot (change this):
OutDir="/Users/hazelma/ldsc"
# enrichment plot file name (change this):
out.fn="enrichment_plot"
# no need to change below unless you know what you are doing:
Colors.HF66 = c(rep("#FB8575",18),"#D17493","#8D719B",rep("#446B85",8),rep("#229E9C",2),"#5DCD8F",rep("#CAF270",3),rep("#DAC14D",5),
rep("#D79347",12),rep("#C06B4D",2),"#677C36",rep("#177374",3),rep("#6D5271",3),rep("#6389AE",2),rep("#34C5CD",3),"#62FCC0")
# tissue in the Cells.HF so use the following chunk of codes:
Data = read.table(paste0(InDir, "/", h2.result), header=T, stringsAsFactors=F)
Data = data.frame(Tissue=factor(Cells.HF[-c(32,62:64)], levels=unique(rev(Cells.HF[-c(32,62:64)]))), Pvalue=as.numeric(Data[c(55:120),7]))
# can adjust the size of the output png file:
png(paste0(OutDir, "/", out.fn, ".png"), width=200, height=1000, type="cairo")
gg <- ggplot(Data, aes(x=Tissue, y=-log10(Pvalue)))
gg <- gg + geom_bar(stat="identity", fill=Colors.HF66) + coord_flip() + ggtitle("All")
gg <- gg + scale_y_continuous(expand=c(0,0))
gg <- gg + theme_minimal(base_family="Helvetica")
gg <- gg + theme(panel.grid.major.y=element_blank(), panel.grid.minor=element_blank())
gg <- gg + theme(plot.title=element_text(size=22, face="bold"), axis.ticks=element_blank(), axis.text=element_text(size=8), axis.title=element_text(size=22))
gg <- gg + labs(x=NULL, y=expression("-log"[10]*"(p-value)"))
gg <- gg + geom_hline(yintercept = -log10(0.05/(66)), linetype=5, alpha=0.5)
print(gg)
print(gg)
